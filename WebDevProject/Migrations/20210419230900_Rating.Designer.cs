// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebDevProject.Models;

namespace WebDevProject.Migrations
{
    [DbContext(typeof(GameContext))]
    [Migration("20210419230900_Rating")]
    partial class Rating
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebDevProject.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RatingId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Year")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("GameId");

                    b.HasIndex("RatingId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            Name = "Madden NFL 20",
                            RatingId = "E",
                            Year = 2019
                        },
                        new
                        {
                            GameId = 2,
                            Name = "Fortnite",
                            RatingId = "T",
                            Year = 2017
                        },
                        new
                        {
                            GameId = 3,
                            Name = "Call of Duty: Black Ops 4",
                            RatingId = "M",
                            Year = 2018
                        });
                });

            modelBuilder.Entity("WebDevProject.Models.Rating", b =>
                {
                    b.Property<string>("RatingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RatingId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            RatingId = "EC",
                            Name = "Early Childhood"
                        },
                        new
                        {
                            RatingId = "E",
                            Name = "Everyone"
                        },
                        new
                        {
                            RatingId = "T",
                            Name = "Teen"
                        },
                        new
                        {
                            RatingId = "M",
                            Name = "Mature"
                        },
                        new
                        {
                            RatingId = "RP",
                            Name = "Rating Pending"
                        });
                });

            modelBuilder.Entity("WebDevProject.Models.Game", b =>
                {
                    b.HasOne("WebDevProject.Models.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rating");
                });
#pragma warning restore 612, 618
        }
    }
}
